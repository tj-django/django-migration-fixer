{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"django-migration-fixer Resolve django makemigrations multiple leaf nodes in the migration graph by ensuring that migration files and dependencies are always ordered regardless of remote changes. Installation $ pip install django-migration-fixer Add migration_fixer to your INSTALLED_APPS INSTALLED_APPS = [ ... , \"migration_fixer\" , ... , ] Usage $ python manage.py makemigrations --fix By default this uses main as the default branch Specifying a different default branch Run: $ python manage.py makemigrations -b master --fix Github Actions ... runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 with : fetch-depth : 0 - name : Set up Python uses : actions/setup-python@v2 with : python-version : '3.6.x' - name : Upgrade pip run : | pip install -U pip - name : Run django-migration-fixer uses : tj-django/django-migration-fixer@v1.0.1 with : managepy-path : /path/to/manage.py - name : Verify Changed files uses : tj-actions/verify-changed-files@v7.1 id : verify-changed-files with : files : | /path/to/migrations - name : Commit migration changes if : steps.verify-changed-files.outputs.files_changed == 'true' run : | git config --local user.email \"github-actions[bot]@users.noreply.github.com\" git config --local user.name \"github-actions[bot]\" git add /path/to/migrations git commit -m \"Update migrations\" - name : Push migration changes if : steps.verify-changed-files.outputs.files_changed == 'true' uses : ad-m/github-push-action@master with : github_token : ${{ secrets.GITHUB_TOKEN }} branch : ${{ github.ref }} Features Maintain a consistent migration history when conflicts occur as a result of changes made using different versions of the default branch. Resolve migration conflicts on PR branches Resolve migration conflicts on the default branch (NOT RECOMMENDED) Supports default migration modules i.e ( 0001_....py ) Supports named migration modules i.e ( custom_migration.py ) Re-nummber all migrations using the last migration on the default branch i.e main or develop Test Platforms ubuntu-* macos-* windows-* Example Branch: main \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py Branch: feature/test-a \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py Branch: feature/test-b \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1228.py Both feature/test-a and feature/test-b share the last migration on main ( 0002_auto_20210521_2328.py ) Once feature/test-a is merged into main you run into the problem of resolving migrations on feature/test-b which was dependent on 0002_auto_20210521_2328.py Branch: main \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py Branch: feature/test-b \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py \\_ __________________ Both dependent on 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1228.py / Running makemigrations fails with the following error: CommandError: Conflicting migrations detected; multiple leaf nodes in the migration graph: (0003_auto_20210522_1128, 0003_auto_20210522_1228 in app). To fix them run 'python manage.py makemigrations --merge' Using the --merge option creates a new migration file which might not be desired. Solution django-migration-fixer identifies changes between the default branch main , and the feature branch feature/test-b and maintains a consistent dependency history as shown below: Branch: feature/test-b \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py \u2502 \u251c\u2500\u2500 0004_auto_20210522_1228.py # Renames: '0003_auto_20210522_1228.py' \u2192 '0004_auto_20210522_1228.py' 0004_auto_20210522_1228.py ... from django.db import migrations , models class Migration ( migrations . Migration ): dependencies = [ ( 'app' , '0003_auto_20210522_1128' ), # Replaced '0002_auto_20210521_2328' \u2192 '0003_auto_20210522_1128' ] operations = [ ... ] NOTE: :warning: This also works when there are conflicts detected on the default branch. i.e You can run python manage.py makemigrations --fix on the main branch which relies on primitively picking the first migration file. e.g (0003_auto_20210522_1128, 0003_auto_20210522_1228 in app) would result in 0003_auto_20210522_1128.py being picked as the base migration which might not be accurate in every case and is not recommended. Assumptions The final migration on the default branch would be used as the base for all subsequent migrations. Found a Bug? To file a bug or submit a patch, please head over to django-migration-fixer on github . If you feel generous and want to show some extra appreciation: Support me with a :star:","title":"Home"},{"location":"#django-migration-fixer","text":"Resolve django makemigrations multiple leaf nodes in the migration graph by ensuring that migration files and dependencies are always ordered regardless of remote changes.","title":"django-migration-fixer"},{"location":"#installation","text":"$ pip install django-migration-fixer","title":"Installation"},{"location":"#add-migration_fixer-to-your-installed_apps","text":"INSTALLED_APPS = [ ... , \"migration_fixer\" , ... , ]","title":"Add migration_fixer to your INSTALLED_APPS"},{"location":"#usage","text":"$ python manage.py makemigrations --fix By default this uses main as the default branch","title":"Usage"},{"location":"#specifying-a-different-default-branch","text":"Run: $ python manage.py makemigrations -b master --fix","title":"Specifying a different default branch"},{"location":"#github-actions","text":"... runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 with : fetch-depth : 0 - name : Set up Python uses : actions/setup-python@v2 with : python-version : '3.6.x' - name : Upgrade pip run : | pip install -U pip - name : Run django-migration-fixer uses : tj-django/django-migration-fixer@v1.0.1 with : managepy-path : /path/to/manage.py - name : Verify Changed files uses : tj-actions/verify-changed-files@v7.1 id : verify-changed-files with : files : | /path/to/migrations - name : Commit migration changes if : steps.verify-changed-files.outputs.files_changed == 'true' run : | git config --local user.email \"github-actions[bot]@users.noreply.github.com\" git config --local user.name \"github-actions[bot]\" git add /path/to/migrations git commit -m \"Update migrations\" - name : Push migration changes if : steps.verify-changed-files.outputs.files_changed == 'true' uses : ad-m/github-push-action@master with : github_token : ${{ secrets.GITHUB_TOKEN }} branch : ${{ github.ref }}","title":"Github Actions"},{"location":"#features","text":"Maintain a consistent migration history when conflicts occur as a result of changes made using different versions of the default branch. Resolve migration conflicts on PR branches Resolve migration conflicts on the default branch (NOT RECOMMENDED) Supports default migration modules i.e ( 0001_....py ) Supports named migration modules i.e ( custom_migration.py ) Re-nummber all migrations using the last migration on the default branch i.e main or develop","title":"Features"},{"location":"#test-platforms","text":"ubuntu-* macos-* windows-*","title":"Test Platforms"},{"location":"#example","text":"Branch: main \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py Branch: feature/test-a \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py Branch: feature/test-b \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1228.py Both feature/test-a and feature/test-b share the last migration on main ( 0002_auto_20210521_2328.py ) Once feature/test-a is merged into main you run into the problem of resolving migrations on feature/test-b which was dependent on 0002_auto_20210521_2328.py Branch: main \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py Branch: feature/test-b \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py \\_ __________________ Both dependent on 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1228.py / Running makemigrations fails with the following error: CommandError: Conflicting migrations detected; multiple leaf nodes in the migration graph: (0003_auto_20210522_1128, 0003_auto_20210522_1228 in app). To fix them run 'python manage.py makemigrations --merge' Using the --merge option creates a new migration file which might not be desired.","title":"Example"},{"location":"#solution","text":"django-migration-fixer identifies changes between the default branch main , and the feature branch feature/test-b and maintains a consistent dependency history as shown below: Branch: feature/test-b \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 0001_initial.py \u2502 \u251c\u2500\u2500 0002_auto_20210521_2328.py \u2502 \u251c\u2500\u2500 0003_auto_20210522_1128.py \u2502 \u251c\u2500\u2500 0004_auto_20210522_1228.py # Renames: '0003_auto_20210522_1228.py' \u2192 '0004_auto_20210522_1228.py' 0004_auto_20210522_1228.py ... from django.db import migrations , models class Migration ( migrations . Migration ): dependencies = [ ( 'app' , '0003_auto_20210522_1128' ), # Replaced '0002_auto_20210521_2328' \u2192 '0003_auto_20210522_1128' ] operations = [ ... ] NOTE: :warning: This also works when there are conflicts detected on the default branch. i.e You can run python manage.py makemigrations --fix on the main branch which relies on primitively picking the first migration file. e.g (0003_auto_20210522_1128, 0003_auto_20210522_1228 in app) would result in 0003_auto_20210522_1128.py being picked as the base migration which might not be accurate in every case and is not recommended.","title":"Solution"},{"location":"#assumptions","text":"The final migration on the default branch would be used as the base for all subsequent migrations.","title":"Assumptions"},{"location":"#found-a-bug","text":"To file a bug or submit a patch, please head over to django-migration-fixer on github . If you feel generous and want to show some extra appreciation: Support me with a :star:","title":"Found a Bug?"},{"location":"CHANGELOG/","text":"Changelog v1.0.0 (2021-07-05) Full Changelog Implemented enhancements: Improve logging #34 [Enhancement] Explore using PyGithub directly. #29 Closed issues: Dependency Dashboard #40 Improve test coverage #17 Merged pull requests: Increase test coverage. #62 ( jackton1 ) Updated README.md #60 ( jackton1 ) Updated README.md #57 ( jackton1 ) Update tox.ini #56 ( jackton1 ) Update dependency Django to v3.2.5 #55 ( renovate[bot] ) Updated README.md #54 ( jackton1 ) Increased test coverage. #53 ( jackton1 ) Clean up docs. #52 ( jackton1 ) Update tj-actions/verify-changed-files action to v7 #51 ( renovate[bot] ) Update precommit hook pycqa/isort to v5.9.1 #50 ( renovate[bot] ) Update precommit hook pycqa/isort to v5.9.0 #49 ( renovate[bot] ) Updated README.md #48 ( jackton1 ) Upgraded v0.0.6 \u2192 v0.0.7 #47 ( jackton1 ) v0.0.7 (2021-06-21) Full Changelog Merged pull requests: Updated README.md #46 ( jackton1 ) Update README.md #45 ( jackton1 ) Updated README.md #44 ( jackton1 ) Improve test coverage #43 ( jackton1 ) [pre-commit.ci] pre-commit autoupdate #42 ( pre-commit-ci[bot] ) Update wearerequired/lint-action action to v1.10.0 #41 ( renovate[bot] ) Update tj-actions/verify-changed-files action to v6.2 #39 ( renovate[bot] ) Update dependency portray to v1.7.0 #38 ( renovate[bot] ) Update dependency mkdocs to v1.2.1 #37 ( renovate[bot] ) Update codecov/codecov-action action to v1.5.2 #36 ( renovate[bot] ) Update actions/cache action to v2.1.6 #35 ( renovate[bot] ) Upgraded v0.0.5 \u2192 v0.0.6 #33 ( jackton1 ) Updated README.md #32 ( jackton1 ) v0.0.6 (2021-06-08) Full Changelog Closed issues: Initial Update #24 Add documentation #18 subprocess call - check for execution of untrusted input. #10 Merged pull requests: Updated README.md #31 ( jackton1 ) Pin django to latest version 3.2.4 #26 ( pyup-bot ) Config file for pyup.io #25 ( pyup-bot ) Updated README.md #21 ( jackton1 ) Updated README.md #20 ( jackton1 ) Added documentation #19 ( jackton1 ) Remove pytest-runner #15 ( jackton1 ) Added mypy configuration and updated tox test. #14 ( jackton1 ) Added action to run makemigrations --fix #13 ( jackton1 ) [Cleanup]: Code duplication #12 ( jackton1 ) [Security]: Fix security issue using subprocess #11 ( jackton1 ) Upgraded v0.0.4 \u2192 v0.0.5 #9 ( jackton1 ) v0.0.5 (2021-05-24) Full Changelog v0.0.4 (2021-05-24) Full Changelog v0.0.3 (2021-05-24) Full Changelog Merged pull requests: chore/update deployment #8 ( jackton1 ) Added bumpversion configuration. #7 ( jackton1 ) Update README.md #6 ( jackton1 ) v0.0.2 (2021-05-23) Full Changelog Closed issues: Install instructions say \"pip install django-view-breadcrumbs\" #5 v0.0.1 (2021-05-23) Full Changelog Merged pull requests: Update README.md #4 ( jackton1 ) Create LICENSE #3 ( jackton1 ) Added named migration. #2 ( jackton1 ) Increased the max_length to 500. #1 ( jackton1 ) * This Changelog was automatically generated by github_changelog_generator","title":"ChangeLog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#v100-2021-07-05","text":"Full Changelog Implemented enhancements: Improve logging #34 [Enhancement] Explore using PyGithub directly. #29 Closed issues: Dependency Dashboard #40 Improve test coverage #17 Merged pull requests: Increase test coverage. #62 ( jackton1 ) Updated README.md #60 ( jackton1 ) Updated README.md #57 ( jackton1 ) Update tox.ini #56 ( jackton1 ) Update dependency Django to v3.2.5 #55 ( renovate[bot] ) Updated README.md #54 ( jackton1 ) Increased test coverage. #53 ( jackton1 ) Clean up docs. #52 ( jackton1 ) Update tj-actions/verify-changed-files action to v7 #51 ( renovate[bot] ) Update precommit hook pycqa/isort to v5.9.1 #50 ( renovate[bot] ) Update precommit hook pycqa/isort to v5.9.0 #49 ( renovate[bot] ) Updated README.md #48 ( jackton1 ) Upgraded v0.0.6 \u2192 v0.0.7 #47 ( jackton1 )","title":"v1.0.0 (2021-07-05)"},{"location":"CHANGELOG/#v007-2021-06-21","text":"Full Changelog Merged pull requests: Updated README.md #46 ( jackton1 ) Update README.md #45 ( jackton1 ) Updated README.md #44 ( jackton1 ) Improve test coverage #43 ( jackton1 ) [pre-commit.ci] pre-commit autoupdate #42 ( pre-commit-ci[bot] ) Update wearerequired/lint-action action to v1.10.0 #41 ( renovate[bot] ) Update tj-actions/verify-changed-files action to v6.2 #39 ( renovate[bot] ) Update dependency portray to v1.7.0 #38 ( renovate[bot] ) Update dependency mkdocs to v1.2.1 #37 ( renovate[bot] ) Update codecov/codecov-action action to v1.5.2 #36 ( renovate[bot] ) Update actions/cache action to v2.1.6 #35 ( renovate[bot] ) Upgraded v0.0.5 \u2192 v0.0.6 #33 ( jackton1 ) Updated README.md #32 ( jackton1 )","title":"v0.0.7 (2021-06-21)"},{"location":"CHANGELOG/#v006-2021-06-08","text":"Full Changelog Closed issues: Initial Update #24 Add documentation #18 subprocess call - check for execution of untrusted input. #10 Merged pull requests: Updated README.md #31 ( jackton1 ) Pin django to latest version 3.2.4 #26 ( pyup-bot ) Config file for pyup.io #25 ( pyup-bot ) Updated README.md #21 ( jackton1 ) Updated README.md #20 ( jackton1 ) Added documentation #19 ( jackton1 ) Remove pytest-runner #15 ( jackton1 ) Added mypy configuration and updated tox test. #14 ( jackton1 ) Added action to run makemigrations --fix #13 ( jackton1 ) [Cleanup]: Code duplication #12 ( jackton1 ) [Security]: Fix security issue using subprocess #11 ( jackton1 ) Upgraded v0.0.4 \u2192 v0.0.5 #9 ( jackton1 )","title":"v0.0.6 (2021-06-08)"},{"location":"CHANGELOG/#v005-2021-05-24","text":"Full Changelog","title":"v0.0.5 (2021-05-24)"},{"location":"CHANGELOG/#v004-2021-05-24","text":"Full Changelog","title":"v0.0.4 (2021-05-24)"},{"location":"CHANGELOG/#v003-2021-05-24","text":"Full Changelog Merged pull requests: chore/update deployment #8 ( jackton1 ) Added bumpversion configuration. #7 ( jackton1 ) Update README.md #6 ( jackton1 )","title":"v0.0.3 (2021-05-24)"},{"location":"CHANGELOG/#v002-2021-05-23","text":"Full Changelog Closed issues: Install instructions say \"pip install django-view-breadcrumbs\" #5","title":"v0.0.2 (2021-05-23)"},{"location":"CHANGELOG/#v001-2021-05-23","text":"Full Changelog Merged pull requests: Update README.md #4 ( jackton1 ) Create LICENSE #3 ( jackton1 ) Added named migration. #2 ( jackton1 ) Increased the max_length to 500. #1 ( jackton1 ) * This Changelog was automatically generated by github_changelog_generator","title":"v0.0.1 (2021-05-23)"},{"location":"makemigrations/","text":"Management Command class migration_fixer.management.commands.makemigrations. Command ( *args , repo=None , **kwargs ) Create a new django migration with support for fixing conflicts. add_arguments ( self , parser ) base_stealth_options tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. check ( self , app_configs=None , tags=None , display_num_errors=False , include_deployment_checks=False , fail_level=40 , databases=None ) Use the system check framework to validate entire Django project. Raise CommandError for any serious message (error or critical errors). If there are only light messages (like warnings), print them to stderr and don't raise an exception. check_migrations ( self ) Print a warning if the set of migrations on disk don't match the migrations in the database. create_parser ( self , prog_name , subcommand , **kwargs ) Create and return the ArgumentParser which will be used to parse the arguments to this command. execute ( self , *args , **options ) Try to execute this command, performing system checks if needed (as controlled by the requires_system_checks attribute, except if force-skipped). get_version ( self ) Return the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version. handle ( *args , **kwargs ) handle_merge ( self , loader , conflicts ) Handles merging together conflicted migrations interactively, if it's safe; otherwise, advises on how to fix it. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. output_transaction bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. print_help ( self , prog_name , subcommand ) Print the help message for this command, derived from self.usage() . requires_migrations_checks bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. requires_system_checks str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. run_from_argv ( self , argv ) Set up any environment changes requested (e.g., Python path and Django settings), then run this command. If the command raises a CommandError , intercept it and print it sensibly to stderr. If the --traceback option is present or the raised Exception is not CommandError , raise it. stealth_options tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. success_msg str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. write_migration_files ( self , changes ) Take a changes dict and write them out as migration files.","title":"management"},{"location":"makemigrations/#management-command","text":"class migration_fixer.management.commands.makemigrations. Command ( *args , repo=None , **kwargs ) Create a new django migration with support for fixing conflicts. add_arguments ( self , parser ) base_stealth_options tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. check ( self , app_configs=None , tags=None , display_num_errors=False , include_deployment_checks=False , fail_level=40 , databases=None ) Use the system check framework to validate entire Django project. Raise CommandError for any serious message (error or critical errors). If there are only light messages (like warnings), print them to stderr and don't raise an exception. check_migrations ( self ) Print a warning if the set of migrations on disk don't match the migrations in the database. create_parser ( self , prog_name , subcommand , **kwargs ) Create and return the ArgumentParser which will be used to parse the arguments to this command. execute ( self , *args , **options ) Try to execute this command, performing system checks if needed (as controlled by the requires_system_checks attribute, except if force-skipped). get_version ( self ) Return the Django version, which should be correct for all built-in Django commands. User-supplied commands can override this method to return their own version. handle ( *args , **kwargs ) handle_merge ( self , loader , conflicts ) Handles merging together conflicted migrations interactively, if it's safe; otherwise, advises on how to fix it. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. output_transaction bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. print_help ( self , prog_name , subcommand ) Print the help message for this command, derived from self.usage() . requires_migrations_checks bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. requires_system_checks str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. run_from_argv ( self , argv ) Set up any environment changes requested (e.g., Python path and Django settings), then run this command. If the command raises a CommandError , intercept it and print it sensibly to stderr. If the --traceback option is present or the raised Exception is not CommandError , raise it. stealth_options tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. success_msg str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. write_migration_files ( self , changes ) Take a changes dict and write them out as migration files.","title":"Management Command"},{"location":"utils/","text":"Utility Functions migration_fixer.utils. fix_numbered_migration ( * , app_label , migration_path , seed , start_name , changed_files ) Resolve migration conflicts for numbered migrations. migration_fixer.utils. fix_named_migration ( * , app_label , migration_path , start_name , changed_files ) Resolve migration conflicts for named migrations. migration_fixer.utils. no_translations ( handle_func ) Decorator that forces a command to run with translations deactivated.","title":"utils"},{"location":"utils/#utility-functions","text":"migration_fixer.utils. fix_numbered_migration ( * , app_label , migration_path , seed , start_name , changed_files ) Resolve migration conflicts for numbered migrations. migration_fixer.utils. fix_named_migration ( * , app_label , migration_path , start_name , changed_files ) Resolve migration conflicts for named migrations. migration_fixer.utils. no_translations ( handle_func ) Decorator that forces a command to run with translations deactivated.","title":"Utility Functions"}]}